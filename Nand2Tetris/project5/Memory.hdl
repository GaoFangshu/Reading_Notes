// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    // address[0..12] are all zero for keyboard
    Keyboard(out=c);
    Or8Way(in=address[0..7], out=check1);
    Or8Way(in[0..4]=address[8..12], in[5..7]=false, out=check2);
    Or(a=check1, b=check2, out=wrong);
    Mux16(a=c, b=false, sel=wrong, out=outkeyboard);

    // to RAM or Screen or Keyboard
    DMux(in=load, sel=address[14], a=loadram, b=loadsk);
    DMux(in=loadsk, sel=address[13], a=loads, b=loadk);

    RAM16K(in=in, load=loadram, address=address[0..13], out=outram);
    Screen(in=in, load=loads, address=address[0..12], out=outscreen);

    // choose output
    Mux16(a=outscreen, b=outkeyboard, sel=address[13], out=outsk);
    Mux16(a=outram, b=outsk, sel=address[14], out=out);
}