// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // input for controlling registers
    And(a=instruction[4], b=instruction[15], out=loadD);

    // have instruction or not
    Not(in=instruction[15], out=noinst);
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inAR);
    Or(a=noinst, b=instruction[5], out=loadA);

    // A register
    ARegister(in=inAR, load=loadA, out=outAR, out[0..14]=addressM);
    
    // ALU:
    //     IN  
    //         x[16], y[16],  // 16-bit inputs        
    //         zx, // zero the x input?
    //         nx, // negate the x input?
    //         zy, // zero the y input?
    //         ny, // negate the y input?
    //         f,  // compute out = x + y (if 1) or x & y (if 0)
    //         no; // negate the out output?
    //
    //     OUT 
    //         out[16], // 16-bit output
    //         zr, // 1 if (out == 0), 0 otherwise
    //         ng; // 1 if (out < 0),  0 otherwise

    And(a=instruction[11], b=instruction[15], out=zx);
    And(a=instruction[10], b=instruction[15], out=nx);
    And(a=instruction[9], b=instruction[15], out=zy);
    And(a=instruction[8], b=instruction[15], out=ny);
    And(a=instruction[7], b=instruction[15], out=f);
    And(a=instruction[6], b=instruction[15], out=no);

    Mux16(a=outAR, b=inM, sel=instruction[12], out=outAM);
    ALU(x=outD, y=outAM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=outALU, zr=zr, ng=ng);
    Or(a=zr, b=ng, out=notpos);
    Not(in=notpos, out=pos);

    // regist the output (D register)
    DRegister(in=outALU, load=loadD, out=outD);

    // PC
    And(a=instruction[2], b=ng, out=j1);
    And(a=instruction[1], b=zr, out=j2);
    And(a=instruction[0], b=pos, out=j3);
    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=j123);
    And(a=j123, b=instruction[15], out=load);

    PC(in=outAR, load=load, inc=true, reset=reset, out[0..14]=pc);

    // writeM
    And(a=instruction[3], b=instruction[15], out=writeM);
}